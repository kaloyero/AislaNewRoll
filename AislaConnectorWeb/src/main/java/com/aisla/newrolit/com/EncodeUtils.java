package com.aisla.newrolit.com;

/**
 * EncodeUtils contains all the conversion arrays and utils 
 * <p>
 * Main objects are the following
 * <p>
 * @author      Luis Paradela
 * @version     1.0
 * @since       1.0
 */
public class EncodeUtils {
	
    private Integer[] ASCIITOEBCDIC = new Integer[]	{                // PC CP437/850 to IBM CP037		
		0x00,0x01,0x02,0x03,0x37,0x2D,0x2E,0x2F,0x16,0x05,0x25,0x0B,0x0C,0x0D,0x0E,0x0F,
		0x10,0x11,0x12,0x13,0xB6,0xB5,0x32,0x26,0x18,0x19,0x3F,0x27,0x1C,0x1D,0x1E,0x1F,
		0x40,0x5A,0x7F,0x7B,0x5B,0x6C,0x50,0x7D,0x4D,0x5D,0x5C,0x4E,0x6B,0x60,0x4B,0x61,
		0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0x7A,0x5E,0x4C,0x7E,0x6E,0x6F,
		0x7C,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,
		0xD7,0xD8,0xD9,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xBA,0xE0,0xBB,0xB0,0x6D,
		0x79,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x91,0x92,0x93,0x94,0x95,0x96,
		0x97,0x98,0x99,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xC0,0x4F,0xD0,0xA1,0xFF,
		0x68,0xDC,0x51,0x42,0x43,0x44,0x47,0x48,0x52,0x53,0x54,0x57,0x56,0x58,0x63,0x67,
		0x71,0x9C,0x9E,0xCB,0xCC,0xCD,0xDB,0xDD,0xDF,0xEC,0xFC,0x4A,0xB1,0xB2,0xBF,0x07,
		0x45,0x55,0xCE,0xDE,0x49,0x69,0x9A,0x9B,0xAB,0xAF,0x5F,0xB8,0xB7,0xAA,0x8A,0x8B,
		0x2B,0x2C,0x09,0x21,0x28,0x65,0x62,0x64,0xB4,0x38,0x31,0x34,0x33,0x70,0x80,0x24,
		0x22,0x17,0x29,0x06,0x20,0x2A,0x46,0x66,0x1A,0x35,0x08,0x39,0x36,0x30,0x3A,0x9F,
		0x8C,0xAC,0x72,0x73,0x74,0x0A,0x75,0x76,0x77,0x23,0x15,0x14,0x04,0x6A,0x78,0x3B,
		0xEE,0x59,0xEB,0xED,0xCF,0xEF,0xA0,0x8E,0xAE,0xFE,0xFB,0xFD,0x8D,0xAD,0xBC,0xBE,
		0xCA,0x8F,0x1B,0xB9,0x3C,0x3D,0xE1,0x9D,0x90,0xBD,0xB3,0xDA,0xFA,0xEA,0x3E,0x41
	};
	
	private Integer[] EBCDICTOASCIIUNICODE = new Integer[] {	// IBM CP037 to PC CP437/850
		0x00,0x00,0x00,0x00,0x9C,0x00,0x86,0x7F,0x97,0x8D,0x8E,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x9D,0x85,0x00,0x87,0x00,0x00,0x92,0x8F,0x00,0x00,0x00,0x00,
		0x80,0x81,0x82,0x83,0x84,0x00,0x00,0x00,0x88,0x89,0x8A,0x8B,0x8C,0x00,0x00,0x00,
		0x90,0x91,0x00,0x93,0x94,0x95,0x96,0x00,0x98,0x99,0x9A,0x9B,0x14,0x15,0x9E,0x00,
		0x00,0xA0,0xE2,0xE4,0xE0,0xE1,0xE3,0xE5,0xE7,0xF1,0x5B,0x00,0x00,0x00,0x00,0x21,
		0x00,0xE9,0xEA,0xEB,0xE8,0xED,0xEE,0xEF,0xEC,0xDF,0x5D,0x00,0x00,0x00,0x00,0x5E,
		0x00,0x00,0xC2,0xC4,0xC0,0xC1,0xC3,0xC5,0xC7,0xD1,0xA6,0x00,0x00,0x00,0x00,0x00,
		0xF8,0xC9,0xCA,0xCB,0xC8,0xCd,0xCe,0xCf,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0xD8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xAB,0xBB,0xF9,0xFD,0xFE,0xB1,
		0xB0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xAA,0xBA,0xE6,0xB8,0xC6,0xA4,
		0xB5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA1,0xBF,0xD0,0xDD,0xDE,0xAE,
		0xA2,0xA3,0xA5,0xB7,0xA9,0xA7,0xB6,0xBC,0xBD,0xBE,0xAC,0x7C,0xAF,0xA8,0xB4,0xD7,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xAD,0xF4,0xF6,0xF2,0xF3,0xF5,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB9,0xFB,0xFC,0xF9,0xFA,0xFF,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB2,0xD4,0xD6,0xD2,0xD3,0xD5,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB3,0xDB,0xDC,0xD9,0xDA,0x9F,
	};
	
	private Integer[] EBCDICTOASCII = new Integer[]	{ // IBM CP037 to PC CP437/850
		0x00,0x01,0x02,0x03,0xDC,0x09,0xC3,0x9F,0xCA,0xB2,0xD5,0x0B,0x0C,0x0D,0x0E,0x0F,
		0x10,0x11,0x12,0x13,0xDB,0xDA,0x08,0xC1,0x18,0x19,0xC8,0xF2,0x1C,0x1D,0x1E,0x1F,
		0xC4,0xB3,0xC0,0xD9,0xBF,0x0A,0x17,0x1B,0xB4,0xC2,0xC5,0xB0,0xB1,0x05,0x06,0x07,
		0xCD,0xBA,0x16,0xBC,0xBB,0xC9,0xCC,0x04,0xB9,0xCB,0xCE,0xDF,0xF4,0xF5,0xFE,0x1A,
		0x20,0xFF,0x83,0x84,0x85,0xA0,0xC6,0x86,0x87,0xA4,0x9B,0x2E,0x3C,0x28,0x2B,0x7C,
		0x26,0x82,0x88,0x89,0x8A,0xA1,0x8C,0x8B,0x8D,0xE1,0x21,0x24,0x2A,0x29,0x3B,0xAA,
		0x2D,0x2F,0xB6,0x8E,0xB7,0xB5,0xC7,0x8F,0x80,0xA5,0xDD,0x2C,0x25,0x5F,0x3E,0x3F,
		0xBD,0x90,0xD2,0xD3,0xD4,0xD6,0xD7,0xD8,0xDE,0x60,0x3A,0x23,0x40,0x27,0x3D,0x22,
		0xBE,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0xAE,0xAF,0xD0,0xEC,0xE7,0xF1,
		0xF8,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,0xA6,0xA7,0x91,0xF7,0x92,0xCF,
		0xE6,0x7E,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0xAD,0xA8,0xD1,0xED,0xE8,0xA9,
		0x5E,0x9C,0x9D,0xFA,0xB8,0x15,0x14,0xAC,0xAB,0xF3,0x5B,0x5D,0xEE,0xF9,0xEF,0x9E,
		0x7B,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0xF0,0x93,0x94,0x95,0xA2,0xE4,
		0x7D,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0xFB,0x96,0x81,0x97,0xA3,0x98,
		0x5C,0xF6,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0xFD,0xE2,0x99,0xE3,0xE0,0xE5,
		0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0xFC,0xEA,0x9A,0xEB,0xE9,0x7F
	};
	
	private Integer[] ASCIITOANSI = new Integer[] {
		0xC7,0xFC,0xE9,0xE2,0xE4,0xE0,0xE5,0xE7,0xEA,0xEB,0xE8,0xEF,0xEE,0xEC,0xC4,0xC5,
		0xC9,0xE6,0xC6,0xF4,0xF6,0xF2,0xFB,0xF9,0xFF,0xD6,0xDC,0xF8,0xA3,0xD8,0xD7,0x83,
		0xE1,0xED,0xF3,0xFA,0xF1,0xD1,0xAA,0xBA,0xBF,0xAE,0xAC,0xBD,0xBC,0xA1,0xAB,0xBB,
		0x80,0x81,0x82,0x84,0x85,0xC1,0xC2,0xC0,0xA9,0x86,0x87,0x88,0x89,0xA2,0xA5,0x8B,
		0x8C,0x8D,0x8E,0x8F,0xAD,0x90,0xE3,0xC3,0x91,0x92,0x93,0x94,0x96,0x97,0x98,0xA4,
		0xF0,0xD0,0xCA,0xCB,0xC8,0x9A,0xCD,0xCE,0xCF,0x9B,0x9C,0x9D,0x9E,0xA6,0xCC,0x9F,
		0xD3,0xDF,0xD4,0xD2,0xF5,0xD5,0xB5,0xDE,0xFE,0xDA,0xDB,0xD9,0xFD,0xDD,0xAF,0xB4,
		0x95,0xB1,0x99,0xBE,0xB6,0xA7,0xF7,0xB8,0xB0,0xA8,0xB7,0xB9,0xB3,0xB2,0x8A,0xA0
	};
	
	private Integer[] ANSITOASCII = new Integer[] {
		0xB0,0xB1,0xB2,0x9F,0xB3,0xB4,0xB9,0xBA,0xBB,0xBC,0xFE,0xBF,0xC0,0xC1,0xC2,0xC3,
		0xC5,0xC8,0xC9,0xCA,0xCB,0xF0,0xCC,0xCD,0xCE,0xF2,0xD5,0xD9,0xDA,0xDB,0xDC,0xDF,
		0xFF,0xAD,0xBD,0x9C,0xCF,0xBE,0xDD,0xF5,0xF9,0xB8,0xA6,0xAE,0xAA,0xC4,0xA9,0xEE,
		0xF8,0xF1,0xFD,0xFC,0xEF,0xE6,0xF4,0xFA,0xF7,0xFB,0xA7,0xAF,0xAC,0xAB,0xF3,0xA8,
		0xB7,0xB5,0xB6,0xC7,0x8E,0x8F,0x92,0x80,0xD4,0x90,0xD2,0xD3,0xDE,0xD6,0xD7,0xD8,
		0xD1,0xA5,0xE3,0xE0,0xE2,0xE5,0x99,0x9E,0x9D,0xEB,0xE9,0xEA,0x9A,0xED,0xE7,0xE1,
		0x85,0xA0,0x83,0xC6,0x84,0x86,0x91,0x87,0x8A,0x82,0x88,0x89,0x8D,0xA1,0x8C,0x8B,
		0xD0,0xA4,0x95,0xA2,0x93,0xE4,0x94,0xF6,0x9B,0x97,0xA3,0x96,0x81,0xEC,0xE8,0x98
	};
	
	
	private Integer[] CP037_CP500 = new Integer[] {	// CP037 to CP500 US, Others
		0x4A,0x4F,0x5A,0x5F,0xB0,0xBA,0xBB,
		0xB0,0xBB,0x4F,0xBA,0x5F,0x4A,0x5A
	};
	
	private Integer[] CP500_CP037 = new Integer[] {	// CP500 to CP037
		0xB0,0xBB,0x4F,0xBA,0x5F,0x4A,0x5A,
		0x4A,0x4F,0x5A,0x5F,0xB0,0xBA,0xBB
	};
	
	private Integer[] CP273_CP500 = new Integer[] {	// CP273 to CP500 Austria, Germany
		0x43,0x4A,0x59,0x5A,0x63,0x6A,0x7C,0xA1,0xB5,0xC0,0xCC,0xD0,0xDC,0xE0,0xEC,0xFC,
		0xC0,0x63,0xA1,0xFC,0x4A,0xCC,0xB5,0x59,0x7C,0x43,0x6A,0xDC,0xD0,0xEC,0xE0,0x5A
	};
	
	private Integer[] CP500_CP273 = new Integer[] {	// CP500 to CP273
		0xC0,0x63,0xA1,0xFC,0x4A,0xCC,0xB5,0x59,0x7C,0x43,0x6A,0xDC,0xD0,0xEC,0xE0,0x5A,
		0x43,0x4A,0x59,0x5A,0x63,0x6A,0x7C,0xA1,0xB5,0xC0,0xCC,0xD0,0xDC,0xE0,0xEC,0xFC
	};
	
	private Integer[] CP277_CP500 = new Integer[] {	// CP277 to CP500 Denmark, Norway
		0x47,0x4A,0x5A,0x5B,0x67,0x6A,0x70,0x7B,0x7C,0x80,0x9C,0x9E,0x9F,0xA1,0xC0,0xD0,
		0xDC,
		0xD0,0x7B,0x9F,0x67,0x5B,0x70,0x6A,0x9E,0x80,0x7C,0xC0,0x4A,0x5A,0xDC,0x9C,0x47,
		0xA1
	};
	
	private Integer[] CP500_CP277 = new Integer[] {	// CP500 to CP277
		0xD0,0x7B,0x9F,0x67,0x5B,0x70,0x6A,0x9E,0x80,0x7C,0xC0,0x4A,0x5A,0xDC,0x9C,0x47,
		0xA1,
		0x47,0x4A,0x5A,0x5B,0x67,0x6A,0x70,0x7B,0x7C,0x80,0x9C,0x9E,0x9F,0xA1,0xC0,0xD0,
		0xDC
	};
	
	private Integer[] CP278_CP500 = new Integer[] {	// CP278 to CP500 Finland, Sweden
		0x43,0x47,0x4A,0x51,0x5A,0x5B,0x63,0x67,0x6A,0x71,0x79,0x7B,0x7C,0x9F,0xA1,0xB5,
		0xC0,0xCC,0xD0,0xDC,0xE0,0xEC,
		0xC0,0xD0,0xB5,0x79,0x9F,0x67,0x7B,0x5B,0xCC,0xE0,0x51,0x63,0xEC,0x5A,0xDC,0x4A,
		0x43,0x6A,0x47,0xA1,0x71,0x7C
	};
	
	private Integer[] CP500_CP278 = new Integer[] {	// CP500 to CP278
		0xC0,0xD0,0xB5,0x79,0x9F,0x67,0x7B,0x5B,0xCC,0xE0,0x51,0x63,0xEC,0x5A,0xDC,0x4A,
		0x43,0x6A,0x47,0xA1,0x71,0x7C,
		0x43,0x47,0x4A,0x51,0x5A,0x5B,0x63,0x67,0x6A,0x71,0x79,0x7B,0x7C,0x9F,0xA1,0xB5,
		0xC0,0xCC,0xD0,0xDC,0xE0,0xEC
	};
	
	private Integer[] CP280_CP500 = new Integer[] {	// CP280 to CP500 Italy
		0x44,0x48,0x4A,0x51,0x54,0x58,0x5A,0x6A,0x79,0x7B,0x7C,0x90,0xA1,0xB1,0xB5,0xC0,
		0xCD,0xD0,0xDD,0xE0,
		0xC0,0xE0,0x90,0x5A,0xD0,0xA1,0x54,0xCD,0xDD,0xB1,0xB5,0x4A,0x58,0x7B,0x7C,0x44,
		0x6A,0x54,0x79,0x48
	};
	
	private Integer[] CP500_CP280 = new Integer[] {	// CP500 to CP280
		0xC0,0xE0,0x90,0x5A,0xD0,0xA1,0x54,0xCD,0xDD,0xB1,0xB5,0x4A,0x58,0x7B,0x7C,0x44,
		0x6A,0x54,0x79,0x48,
		0x44,0x48,0x4A,0x51,0x54,0x58,0x5A,0x6A,0x79,0x7B,0x7C,0x90,0xA1,0xB1,0xB5,0xC0,
		0xCD,0xD0,0xDD,0xE0
	};
	
	private Integer[] CP284_CP500 = new Integer[]	// CP273 to CP500 Austria, Germany
	{
		0x49,0x5F,0x69,0x6A,0x7B,0xA1,0xBA,0xBD,
		0x6A,0xBA,0x7B,0x49,0x79,0xBD,0x5F,0xA1
	};
	
	private Integer[] CP500_CP284 = new Integer[]	// CP500_CP284
	{
		0x6A,0xBA,0x7B,0x49,0x79,0xBD,0x5F,0xA1,
		0x49,0x5F,0x69,0x6A,0x7B,0xA1,0xBA,0xBD
	};
	
	private Integer[] CP285_CP500 = new Integer[]	// CP285 to CP500 United Kingdom
	{
		0x4A,0x4F,0x5A,0x5B,0x5F,0xA1,0xB1,0xBA,0xBB,
		0x5B,0xBB,0x4F,0xB1,0xBA,0xBC,0x4A,0x5F,0x5A
	};
	
	private Integer[] CP500_CP285 = new Integer[]	
	{
		0x5B,0xBB,0x4F,0xB1,0xBA,0xBC,0x4A,0x5F,0x5A,
		0x4A,0x4F,0x5A,0x5B,0x5F,0xA1,0xB1,0xBA,0xBB
	};
	
	private Integer[] CP297_CP500 = new Integer[]	// CP297 to CP500 France
	{
		0x44,0x48,0x4A,0x51,0x54,0x5A,0x6A,0x79,0x7B,0x7C,0x90,0xA0,0xA1,0xB1,0xB5,0xBD,
		0xC0,0xD0,0xDD,0xE0,
		0x7C,0xE0,0x90,0xC0,0xD0,0xB5,0xDD,0xA0,0xB1,0x44,0x4A,0x79,0x7F,0x7B,0x5A,0xA1,
		0x51,0x54,0x6A,0x48
	};
	
	private Integer[] CP500_CP297 = new Integer[]	// CP500 to CP297
	{
		0x7C,0xE0,0x90,0xC0,0xD0,0xB5,0xDD,0xA0,0xB1,0x44,0x4A,0x79,0x7F,0x7B,0x5A,0xA1,
		0x51,0x54,0x6A,0x48,
		0x44,0x48,0x4A,0x51,0x54,0x5A,0x6A,0x79,0x7B,0x7C,0x90,0xA0,0xA1,0xB1,0xB5,0xBD,
		0xC0,0xD0,0xDD,0xE0
	};
	
	private Integer[] CP871_CP500 = new Integer[]	// CP871 to CP500 Iceland
	{                                       // NOTE C0 and D0 {} could be reversed
		0x4A,0x5A,0x5F,0x79,0x7C,0x8C,0x8E,0x9C,0x9E,0xA1,0xAC,0xAE,0xBE,0xC0,0xCC,0xD0,
		0xE0,0xEC,
		0xAE,0x9E,0xEC,0x8C,0xAC,0x79,0xC0,0xD0,0x5A,0xCC,0x7C,0x4A,0xE0,0x8E,0xA1,0x9C,
		0xBE,0x5F
	};
	
	private Integer[] CP500_CP871 = new Integer[]
	{
		0xAE,0x9E,0xEC,0x8C,0xAC,0x79,0xC0,0xD0,0x5A,0xCC,0x7C,0x4A,0xE0,0x8E,0xA1,0x9C,
		0xBE,0x5F,
		0x4A,0x5A,0x5F,0x79,0x7C,0x8C,0x8E,0x9C,0x9E,0xA1,0xAC,0xAE,0xBE,0xC0,0xCC,0xD0,
		0xE0,0xEC
	};
	
	public Integer[] getASCIITOEBCDIC() {
		return ASCIITOEBCDIC;
	}

	public void setASCIITOEBCDIC(Integer[] aSCIITOEBCDIC) {
		ASCIITOEBCDIC = aSCIITOEBCDIC;
	}

	public Integer[] getEBCDICTOASCIIUNICODE() {
		return EBCDICTOASCIIUNICODE;
	}

	public void setEBCDICTOASCIIUNICODE(Integer[] eBCDICTOASCIIUNICODE) {
		EBCDICTOASCIIUNICODE = eBCDICTOASCIIUNICODE;
	}

	public Integer[] getEBCDICTOASCII() {
		return EBCDICTOASCII;
	}

	public void setEBCDICTOASCII(Integer[] eBCDICTOASCII) {
		EBCDICTOASCII = eBCDICTOASCII;
	}

	public Integer[] getASCIITOANSI() {
		return ASCIITOANSI;
	}

	public void setASCIITOANSI(Integer[] aSCIITOANSI) {
		ASCIITOANSI = aSCIITOANSI;
	}

	public Integer[] getANSITOASCII() {
		return ANSITOASCII;
	}

	public void setANSITOASCII(Integer[] aNSITOASCII) {
		ANSITOASCII = aNSITOASCII;
	}

	public Integer[] getCP037_CP500() {
		return CP037_CP500;
	}

	public void setCP037_CP500(Integer[] cP037_CP500) {
		CP037_CP500 = cP037_CP500;
	}

	public Integer[] getCP500_CP037() {
		return CP500_CP037;
	}

	public void setCP500_CP037(Integer[] cP500_CP037) {
		CP500_CP037 = cP500_CP037;
	}

	public Integer[] getCP273_CP500() {
		return CP273_CP500;
	}

	public void setCP273_CP500(Integer[] cP273_CP500) {
		CP273_CP500 = cP273_CP500;
	}

	public Integer[] getCP500_CP273() {
		return CP500_CP273;
	}

	public void setCP500_CP273(Integer[] cP500_CP273) {
		CP500_CP273 = cP500_CP273;
	}

	public Integer[] getCP277_CP500() {
		return CP277_CP500;
	}

	public void setCP277_CP500(Integer[] cP277_CP500) {
		CP277_CP500 = cP277_CP500;
	}

	public Integer[] getCP500_CP277() {
		return CP500_CP277;
	}

	public void setCP500_CP277(Integer[] cP500_CP277) {
		CP500_CP277 = cP500_CP277;
	}

	public Integer[] getCP278_CP500() {
		return CP278_CP500;
	}

	public void setCP278_CP500(Integer[] cP278_CP500) {
		CP278_CP500 = cP278_CP500;
	}

	public Integer[] getCP500_CP278() {
		return CP500_CP278;
	}

	public void setCP500_CP278(Integer[] cP500_CP278) {
		CP500_CP278 = cP500_CP278;
	}

	public Integer[] getCP280_CP500() {
		return CP280_CP500;
	}

	public void setCP280_CP500(Integer[] cP280_CP500) {
		CP280_CP500 = cP280_CP500;
	}

	public Integer[] getCP500_CP280() {
		return CP500_CP280;
	}

	public void setCP500_CP280(Integer[] cP500_CP280) {
		CP500_CP280 = cP500_CP280;
	}

	public Integer[] getCP284_CP500() {
		return CP284_CP500;
	}

	public void setCP284_CP500(Integer[] cP284_CP500) {
		CP284_CP500 = cP284_CP500;
	}

	public Integer[] getCP500_CP284() {
		return CP500_CP284;
	}

	public void setCP500_CP284(Integer[] cP500_CP284) {
		CP500_CP284 = cP500_CP284;
	}

	public Integer[] getCP285_CP500() {
		return CP285_CP500;
	}

	public void setCP285_CP500(Integer[] cP285_CP500) {
		CP285_CP500 = cP285_CP500;
	}

	public Integer[] getCP500_CP285() {
		return CP500_CP285;
	}

	public void setCP500_CP285(Integer[] cP500_CP285) {
		CP500_CP285 = cP500_CP285;
	}

	public Integer[] getCP297_CP500() {
		return CP297_CP500;
	}

	public void setCP297_CP500(Integer[] cP297_CP500) {
		CP297_CP500 = cP297_CP500;
	}

	public Integer[] getCP500_CP297() {
		return CP500_CP297;
	}

	public void setCP500_CP297(Integer[] cP500_CP297) {
		CP500_CP297 = cP500_CP297;
	}

	public Integer[] getCP871_CP500() {
		return CP871_CP500;
	}

	public void setCP871_CP500(Integer[] cP871_CP500) {
		CP871_CP500 = cP871_CP500;
	}

	public Integer[] getCP500_CP871() {
		return CP500_CP871;
	}

	public void setCP500_CP871(Integer[] cP500_CP871) {
		CP500_CP871 = cP500_CP871;
	}

	/**
	 * Converts EBCDIC to ASCII
	 * <p>
	 * This method always returns immediately. 
	 *
	 * @param  commBuffer CommBufferLogic
	 * @param  Data
	 * 
	 * @return 	CommBufferLogic
	 */    
	public Integer doEbcdicToAscii(CommBufferLogic commBuffer, Integer Data) {
        // Euro -- IBM has new codepages 1140..1149 using 0x9F except for
        //         Scandinavian 0x5A.  Scandinavian translates 0x5A to 0x9F.
        //         Thus CP500 (0x9F) to ASCII (CP858 0xD5) to ANSI (CP1252 0x80)
        //         will work.
        Integer temp = Data;

        if (commBuffer.getConnectionData().getCodePage() != 37) {               // Default US
        	// Display EBCDIC to ASCII uses CP037
            Integer idx, size;
            switch (commBuffer.getConnectionData().getCodePage()) {
                case 273:                   // Austria, Germany
                    size = CP273_CP500.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP273_CP500[idx]) {
                            temp = CP273_CP500[idx + size];
                            break;
                        }
                    }
                    break;
                case 277:                   // Denmark, Norway
                    size = CP277_CP500.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP277_CP500[idx]) {
                            temp = CP277_CP500[idx + size];
                            break;
                        }
                    }
                    break;
                case 278:                   // Finland, Sweden
                    size = CP278_CP500.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP278_CP500[idx]) {
                            temp = CP278_CP500[idx + size];
                            break;
                        }
                    }
                    break;
                case 280:                   // Italy
                    size = CP280_CP500.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP280_CP500[idx]) {
                            temp = CP280_CP500[idx + size];
                            break;
                        }
                    }
                    break;
                case 284:                   // Spain, Latin America
                    size = CP284_CP500.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP284_CP500[idx]) {
                            temp = CP284_CP500[idx + size];
                            break;
                        }
                    }
                    break;
                case 285:                   // United Kingdom
                    size = CP285_CP500.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP285_CP500[idx]) {
                            temp = CP285_CP500[idx + size];
                            break;
                        }
                    }
                    break;
                case 297:                   // France
                    size = CP297_CP500.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP297_CP500[idx]) {
                            temp = CP297_CP500[idx + size];
                            break;
                        }
                    }
                    break;
                case 871:                   // Iceland
                    size = CP871_CP500.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP871_CP500[idx]) {
                            temp = CP871_CP500[idx + size];
                            break;
                        }
                    }
                    break;
            }
            size = CP500_CP037.length / 2;
            for (idx = 0; idx < size; idx++) {
                if (temp == CP500_CP037[idx]) {
                    temp = CP500_CP037[idx + size];
                    break;
                }
            }
        }

        Integer result = 0;
        if(temp < EBCDICTOASCII.length) {
        	result = EBCDICTOASCII[temp];
        }
        else {
			result = 0;
		}
        
        return result;
	}

	/**
	 * Converts ASCII to EBCDIC 
	 * <p>
	 * This method always returns immediately. 
	 *
	 * @param  commBuffer CommBufferLogic
	 * @param  ascii Data
	 * 
	 * @return 	CommBufferLogic
	 */    
    public Integer doAsciiToEbcdic(CommBufferLogic commBuffer, int ascii) {
        Integer temp = ASCIITOEBCDIC[ascii];

        Integer codePage = commBuffer.getConnectionData().getCodePage();
        if (codePage != 37) {               // Default US
                                            // ASCII to EBCDIC based on CP037
            Integer idx, size;
            size = CP037_CP500.length / 2;
            for (idx = 0; idx < size; idx++) {
                if (temp == CP037_CP500[idx]) {
                    temp = CP037_CP500[idx + size];
                    break;
                }
            }
            switch (codePage) {             // Latin_1 CCSID 697 only
                case 273:                   // Austria, Germany
                    size = CP500_CP273.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP500_CP273[idx]) {
                            temp = CP500_CP273[idx + size];
                            break;
                        }
                    }
                    break;
                case 277:                   // Denmark, Norway
                    size = CP500_CP277.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP500_CP277[idx]) {
                            temp = CP500_CP277[idx + size];
                            break;
                        }
                    }
                    break;
                case 278:                   // Finland, Sweden
                    size = CP500_CP278.length / 2;
                    for (idx = 0; idx < size; idx++)
                    {
                        if (temp == CP500_CP278[idx]) {
                            temp = CP500_CP278[idx + size];
                            break;
                        }
                    }
                    break;
                case 280:                   // Italy
                    size = CP500_CP280.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP500_CP280[idx]) {
                            temp = CP500_CP280[idx + size];
                            break;
                        }
                    }
                    break;
                case 284:                   // Spain, Latin America
                    size = CP500_CP284.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP500_CP284[idx]) {
                            temp = CP500_CP284[idx + size];
                            break;
                        }
                    }
                    break;
                case 285:                   // United Kingdom
                    size = CP500_CP285.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP500_CP285[idx]) {
                            temp = CP500_CP285[idx + size];
                            break;
                        }
                    }
                    break;
                case 297:                   // France
                    size = CP500_CP297.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP500_CP297[idx]) {
                            temp = CP500_CP297[idx + size];
                            break;
                        }
                    }
                    break;
                case 871:                   // Iceland
                    size = CP500_CP871.length / 2;
                    for (idx = 0; idx < size; idx++) {
                        if (temp == CP500_CP871[idx]) {
                            temp = CP500_CP871[idx + size];
                            break;
                        }
                    }
                    break;
            }
        }
        return temp;
    }
	
	/**
	 * Return UNICODE from an integer value 
	 * <p>
	 * This method always returns immediately. 
	 *
	 * @param  value
	 * 
	 * @return 	UNICODE String
	 */    
    public String getUnicode(Integer value)
    {
        //Search for char
        Integer[] auxArr = new Integer[2];

        for (Integer ix = 0; ix < EBCDICTOASCII.length; ++ix)
            if (EBCDICTOASCII[ix] == value)
            {

                Integer aux = EBCDICTOASCIIUNICODE[ix];
                auxArr[0] = aux;
                auxArr[1] = 0;

                if (aux == 0)
                    return (" ");

                return (String.valueOf(aux));

            }

        return (" ");
    }
}
